nestlist = list(a=list(matrix(rnorm(10),5,2),val=3),
b=list(sample(letters,10),values=runif(5)),
c=list(list(1:10,1:20),list(1:5,1:10)))
nestlist
str(nestlist)
ls
clear
clc
"\12"
"\13"
"\15"
"15"
"\015"
"\002"
"\020"
"\02"
"\015"
"\020"
"\08"
"\06"
"\07"
"\08"
"\09"
"\10"
"\010"
"\011"
"\012"
"\013"
"\014"
"\015"
"\016"
"\017"
"\^L"
"^L"
"\^l"
"\014"
cat("\014")
install.packages("fEcofin")
install.packages("Rcurl")
install.packages("RCurl")
require (RCurl)
?RCurl
??RCurl
sit <- getURLContent('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', binary=TRUE, followlocation = TRUE, ssl.verifypeer = FALSE)
dim (sit)
con = gzcon(rawConnection(sit, 'rb'))
source(con)
close(con)
load.packages('quantmod')
data <- new.env()
?getURLContent
srt (sit)
str (sit)
sit <- getURLContent('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', binary=TRUE, followlocation = TRUE, ssl.verifypeer = FALSE)
sit
?gzcon
source(con)
con <- gzcon(rawConnection(sit, 'rb'))
source(con)
? source
close(con)
data <- new.env()
?new.env
tickers<-spl("VBMFX,VTSMX,VGTSX,VGSIX")
getSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
dim (tic)
dim (tickers)
size (tickers)
str (tickers)
str (data)
data
??bt.prep
?bt.prep
bt.prep(data, align='remove.na', dates='1990::2013')
bt.prep
prices<-data$prices
ret<-na.omit(prices/mlag(prices) - 1)
ret
dta
data
ls(data)
data <- new.env()
ls (data)
getSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)
ls (data)
data$VBMFX
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na', dates='1990::2013')
ls(data)
prices<-data$prices
prices <- data$prices
returns <- na.omit(prices/mlag(prices) - 1)
data <- new.env()
# Set tickers:
tickers<-spl("VBMFX,VTSMX,VGTSX,VGSIX")
ls (data)
# get symbol from yahoo into 4 dataframes
getSymbols(tickers, src = 'yahoo', from = '1980-01-01', env = data, auto.assign = T)
# clean up 4 data frames for OHLC
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
ls (data)
bt.prep(data, align='remove.na', dates='1990::2013')
#
# bring prices and returns to the global environment:
prices <- data$prices
returns <- na.omit(prices/mlag(prices) - 1)
dim (prices     )
head(prices)
dim (returns)
)
head(returns     )
weights <- matrix (1/ncol(returns), nrow = 1 , ncol = ncol (returns), byrow = T)
weights
port_returns <- returns %*% t(weights)
port_returns
str (returns)
returns.mat <- as.matrix (returns)
str (returns.mat)
pc.fit <- princomp (returns.mat)
pc.fit
names (pc.fit)
demean = scale(coredata(returns), center=TRUE, scale=FALSE)
covm<-cov(demean)
covm <- cov(demean)
dim (demean)
dim (covm)
covm
eval <- eigen(x = covm, symmetric = TRUE)
evaldim (covm)
eval
eval <- eigen(x = covm, symmetric = TRUE)$values
evec <- eigen(x = covm, symmetric = TRUE)$vectors
evec <- eigen(x = covm, symmetric = TRUE)$vectors
evec
eval
pc.fit
names(pc.fit)
eval - pc.fit$scale
eval - pc.fit$scores
names(pc.fit)
pc.fit$call
pc.fit$scale
pc.fit$scores
names(pc.fit)
pc.fit$center
eval - pc.fit$center
eval
eval <- eigen(x = covm, symmetric = TRUE)$values
evec <- eigen(x = covm, symmetric = TRUE)$vectors
eval
eval^2
names (pc.fit)
returns.mat <- as.matrix (returns)
pc.fit <- princomp (returns.mat)
names (pc.fit)
pc.fit$scores
?princomp
pc.fit$loadings
evec <- eigen(x = covm, symmetric = TRUE)$vectors
evec
sumrow(evec)
row.sum(evec)
rowsum(evec)
rowsum(evec, group = 1:4)
rowsum(evec, group = 1)
rowsum(evec, group = c(1,4))
rowsum(evec, group = c(1:44))
rowsum(evec, group = c(1:4))
evec
?rowsum
rowSums(evec, group = c(1:4))
rowSums(evec)
colSums(evec)
evec
pc.fit$loadings
eval
?princomp
pc.fit <- princomp (returns.mat, scores = T)
pc.fit$scores
names (pc.fit)
pc.fit$loadings
evec
colSums(evec)
rowSums(evac)
rowSums(evec)
pc.fit
names(pc.fit)
pc.fit$sdev
pc.fit$sdev^2
pc.fit$sdev
pc.fit$sdev^2
pc.fit$loadings
pc.fit$loadings
summary (pc.fit)
