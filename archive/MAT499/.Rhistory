install.packages('igraph')
require(igraph)
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
require(Rgraphviz)
require(graphviz)
require(Rgraphviz)
adj.mat <- matrix(sample(c(0,1), 9, replace=TRUE), nr=3)
g <- graph.adjacency(adj.mat)
plot(g)
source('~/.active-rstudio-document', echo=TRUE)
adj.mat <- matrix(sample(c(0,2), 90, replace=TRUE), nr=3)
g <- graph.adjacency(adj.mat)
plot(g)
adj.mat <- matrix(sample(c(0,1), 9, replace=TRUE), nr=30)
adj.mat <- matrix(sample(c(0,1), 30, replace=TRUE), nr=30)
g <- graph.adjacency(adj.mat)
adj.mat <- matrix(sample(c(0,1), 16, replace=TRUE), nr=4)
plot(g)
g <- graph.adjacency(adj.mat)
plot(g)
adj.mat <- matrix(sample(c(0,1), 1600, replace=TRUE), nr=40)
g <- graph.adjacency(adj.mat)
plot(g)
adj.mat <- matrix(sample(c(0,1), 100, replace=TRUE), nr=10)
g <- graph.adjacency(adj.mat)
plot(g)
??adj.mat
??cytoscape
??Rcytoscape
source("http://sna.stanford.edu/setup.R")
install.packages("igraph", repos = "http://cran.cnr.berkeley.edu/",
source("http://sna.stanford.edu/setup.R")
install.packages('NetData')
install.packages('igraphtosonia')
require(NetData)
install.packages('ergm')
install.packages('reshape')
install.packages('sna')
install.packages('numDeriv')
install.packages('MatchIt')
install.packages('coin')
install.packages('Hmisc')
install.packages('lattice')
install.packages('nFactors')
install.packages('NetCluster')
require(ergm)
require(reshape)
require(igraphtosonia)
require(sna)
require(numDeriv)
require(MatchIt)
require(coin)
require(Hmisc)
require(lattice)
require(nFactors)
require(NetCluster)
require(igraphtosonia)
install.packages('network')
install.packages('network')
require(network)
biocLite("RCytoscape")
source("http://bioconductor.org/biocLite.R");
biocLite("RCytoscape")
require(RCytoscape)
detach(package:RCytoscape)
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
advice_data_frame
View(friendship_data_frame)
View(reports_to_data_frame)
attributes <- read.csv('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-Attributes.csv', header=T)
attributes
rm(adj.mat)
colnames(advice_data_frame) <- c('ego','alter', 'advice_tie')
colnames(reports_to_data_frame) <- c('ego','alter', 'reports_to_tie')
colnames(friendship_data_frame) <- c('ego','alter', 'friendship_tie')
fix(advice_data_frame)
colnames(friendship_data_frame) <- c('ego','alter', 'friendship_tie')
advice_data_frame$ego == friendship_data_frame$ego
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$ego != friendship_data_frame$ego)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
krack_full_data_frame <- cbind(advice_data_frame, friendship_data_frame$friendship_tie, reports_to_data_frame$reports_to_tie)
View(krack_full_data_frame)
names(krack_full_data_frame)[4:5] <- cbind('friendship_tie','reports_to_tie')
View(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
View(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
require(igraph)
detach(package:network)
detach(package:graph)
require(igraph)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
get.edge.attribute(krack_full, 'advice_tie')
get.edge.attribute(krack_full, 'friendship_tie')
get.edge.attribute(krack_full, 'reports_to_tie')
krack_full_symmetrized <- as.undirected(krack_full, mode='collapse')
summary(krack_full_symmetrized)
krack_full_nonzero_edges
V(krack_full)
for (i in V(krack_full)) {
for (j in names(attributes)) {
krack_full <- set.vertex.attribute(krack_full,
j,
index = i,
attributes[i + 1, j])
}
}
krack_full
summary(krack_full)
attributes = cbind(1:length(attributes[,1]), attributes)
krack_full <- graph.data.frame(d = krack_full_nonzero_edges,
vertices = attributes)
summary(krack_full)
get.vertex.attribute(krack_full, 'AGE')
get.vertex.attribute(krack_full, 'TENURE')
get.vertex.attribute(krack_full, 'LEVEL')
get.vertex.attribute(krack_full, 'DEPT')
pdf("1.1_Krackhardt_Full.pdf")
plot(krack_full)
dev.off()
library (RCytoscape)
cy = CytoscapeConnection ()
pluginVersion (cy)
library (RCytoscape)
cy = CytoscapeConnection ()
pluginVersion (cy)
require(RCytoscape)
cy = CytoscapeConnection ()
pluginVersion (cy)
krack_advice_only <- delete.edges(krack_full,
E(krack_full)[get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
